package controller;

import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXTextArea;
import com.jfoenix.controls.JFXTextField;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.util.Duration;
import model.dto.Patient;
import org.controlsfx.control.Notifications;
import service.ServiceFactory;
import service.custom.PatientService;
import util.ServiceType;

import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

public class patientController implements Initializable {
    public JFXTextField txtName;
    public JFXTextField txtAge;
    public JFXTextField txtContact;
    public JFXTextField txtImgContact;
    public JFXTextArea txtMedicalHistory;
    public JFXComboBox ComboGender;
    public TableView tblPatients;
    public TableColumn colId;
    public TableColumn colName;
    public TableColumn colGender;
    public TableColumn colContact;
    public TableColumn colImgContact;
    public TableColumn colMedicalHis;
    public TableColumn colAge;


   // ArrayList<Patient> patientArrayList = new ArrayList<>();


    private int nextId = 1;

    String originalName = "";

    private final PatientService patientService;

    public patientController() {
        try {
            this.patientService = ServiceFactory.getInstance().getServiceType(ServiceType.PATIENT);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to initialize PatientService", e);
        }
    }

    public void btnAddOnAction(ActionEvent event) {

        if(validateInput()){
            try {
                Patient patient = createPatientFromForm();
                patientService.add(patient);

            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            clearForm();
            Notifications notificationBuilder = Notifications.create()
                    .title("Added Successfully")
                    .text("saved to/home/downloads")
                    .graphic(null)
                    .hideAfter(Duration.seconds(5))
                    .position(Pos.BOTTOM_RIGHT)
                    .onAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            System.out.println("clicked on notification");
                        }

                    });
             notificationBuilder.showConfirm();
        }



    }


    private void clearForm() {
        txtName.setText("");
        txtAge.setText("");
        ComboGender.setValue(null);
        txtContact.setText("");
        txtImgContact.setText("");
        txtMedicalHistory.setText("");
        originalName = "";
    }

    private Patient createPatientFromForm() {
        return new Patient(
                0,// ID will be auto-generated by database
                txtName.getText(),
                Integer.parseInt(txtAge.getText()),
                (String) ComboGender.getValue(),
                txtContact.getText(),
                txtImgContact.getText(),
                txtMedicalHistory.getText()
        );
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ComboGender.getItems().addAll("Male", "Female", "Other");

        colId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colName.setCellValueFactory(new PropertyValueFactory<>("name"));
        colAge.setCellValueFactory(new PropertyValueFactory<>("age"));
        colGender.setCellValueFactory(new PropertyValueFactory<>("gender"));
        colContact.setCellValueFactory(new PropertyValueFactory<>("contact"));
        colImgContact.setCellValueFactory(new PropertyValueFactory<>("imergencyContact"));
        colMedicalHis.setCellValueFactory(new PropertyValueFactory<>("medicalHistory"));

    }


    public void btnReloadOnAction(ActionEvent event) {

        try {
            List<Patient> patientList = patientService.getAll(); // Changed from getAllPatient to getAll
            ObservableList<Patient> patientObservableList = FXCollections.observableArrayList();
            patientObservableList.addAll(patientList);
            tblPatients.setItems(patientObservableList);
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("error");
        }
    }

    public void btnSearchOnAction(ActionEvent event) throws SQLException {

        String searchName = txtName.getText();

        if (searchName == null || searchName.trim().isEmpty()) {
            new Alert(Alert.AlertType.WARNING, "Please enter a name to search").showAndWait();
            return;
        }

        try{
            Patient foundPatient = patientService.searchByName(searchName);

            if(foundPatient!=null){
                populateFields(foundPatient);
            } else {
                // Clear fields if no patient found
                new Alert(Alert.AlertType.ERROR, "Not Found! ").showAndWait();
                txtName.setText("");
                txtAge.setText("");
                ComboGender.setValue(null);
                txtContact.setText("");
                txtImgContact.setText("");
                txtMedicalHistory.setText("");
                originalName = "";
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }



    }

    public void btnUpdateOnAction(ActionEvent event) {

        try {
            Patient patient = createPatientFromForm();
            boolean success = patientService.update(patient, originalName);

            if(success) {
                new Alert( Alert.AlertType.INFORMATION,"Patient updated successfully!").showAndWait();

                originalName = txtName.getText(); // Update the original name
            } else {
                new Alert( Alert.AlertType.ERROR,"Failed to update patient").showAndWait();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Failed updating ");
        }
    }

    public void btnDeleteOnAtion(ActionEvent event) throws SQLException {
        String name =  txtName.getText();

        patientService.delete(name);
    }

    private void populateFields(Patient patient){

        if(patient != null){
            txtName.setText(patient.getName());
            txtAge.setText(String.valueOf(patient.getAge()));
            ComboGender.setValue(patient.getGender());
            txtContact.setText(patient.getContact());
            txtImgContact.setText(patient.getImergencyContact());
            txtMedicalHistory.setText(patient.getMedicalHistory());

            originalName = patient.getName();
        }

    }

    private boolean validateInput(){


        //validate name
        if(txtName.getText() == null || txtName.getText().trim().isEmpty()){
            new Alert( Alert.AlertType.ERROR,"NAme is required").showAndWait();
            return false;
        }

        //validate Age
        try{
            int age = Integer.parseInt(txtAge.getText());
            if(age<0){
                new Alert( Alert.AlertType.ERROR,"Age should be grate  than 0").showAndWait();
                return false;
            }
        }catch (NumberFormatException e){
            new Alert( Alert.AlertType.ERROR,"Age should be a number").showAndWait();
            return false;
        }

        //validate  contact information

        if(txtContact.getText()==null || txtContact.getText().trim().isEmpty()){
            new Alert( Alert.AlertType.ERROR,"Contact information is required").showAndWait();
            return false;
        }

        //validate email

        if (!isValidEmail(txtContact.getText())) {
            new Alert(Alert.AlertType.ERROR, "Please enter a valid email address").showAndWait();
            return false;
        }


        return true;
    }

    private boolean isValidEmail(String email) {
        if (email == null || email.trim().isEmpty()) {
            return false;
        }
        String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        return email.matches(emailRegex);
    }

    public void desktopNotifications(){
        Notifications notificationBuilder = Notifications.create()
                .title("Added Successfully")
                .text("saved to/home/downloads")
                .graphic(null)
                .hideAfter(Duration.seconds(5))
                .position(Pos.BOTTOM_RIGHT)
                .onAction(new EventHandler<ActionEvent>() {
                    @Override
                    public void handle(ActionEvent event) {
                        System.out.println("clicked on notification");
                    }

                });
        notificationBuilder.showConfirm();
    }

}

