package controller;

import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXTextField;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.Initializable;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.util.Duration;
import model.dto.Bill;
import model.dto.Prescription;
import org.controlsfx.control.Notifications;
import service.ServiceFactory;
import service.custom.BillingService;
import service.custom.PatientService;
import util.ServiceType;

import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import java.util.ResourceBundle;

public class billViewController implements Initializable {
    public JFXTextField txtTotalAmount;
    public JFXComboBox PatientCombo;
    public JFXComboBox PaidCombo;
    public DatePicker datePicker;
    public TableView tblBilling;
    public TableColumn colBillId;
    public TableColumn colPatientName;
    public TableColumn colTotalAmount;
    public TableColumn colDate;
    public TableColumn colPaid;


    PatientService patientService = ServiceFactory.getInstance().getServiceType(ServiceType.PATIENT);

    BillingService billingService = ServiceFactory.getInstance().getServiceType(ServiceType.BILLING);

    public billViewController() throws SQLException {
    }

    public void btnOnAddAction(ActionEvent event) {

        if(validateInput()){
            try {
                Bill bill = createBillingForm();

                billingService.add(bill);

                clearForm();

            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            clearForm();
            Notifications notificationBuilder = Notifications.create()
                    .title("Added Successfully")
                    .text("saved to/home/downloads")
                    .graphic(null)
                    .hideAfter(Duration.seconds(5))
                    .position(Pos.BOTTOM_RIGHT)
                    .onAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            System.out.println("clicked on notification");
                        }

                    });
            notificationBuilder.showConfirm();
        }

    }

    private  int currentBillId = 0;
    private Bill createBillingForm() {

        Bill bill =  new Bill(
                currentBillId,// ID will be auto-generated by database
                (String)PatientCombo.getValue(),
                Integer.parseInt(txtTotalAmount.getText()),
                PaidCombo.getValue().toString(),
                datePicker.getValue()
        );

        return bill;
    }

    private void clearForm() {
        currentBillId = 0;
        PatientCombo.setValue(null);
        txtTotalAmount.setText(null);
        PaidCombo.setValue(null);
        datePicker.setValue(null);
    }


    public void btnOnUpdateAction(ActionEvent event) {
        if (validateInput()) {
            try {
                Bill bill = createBillingForm();
                billingService.update(bill);
                clearForm();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            Notifications notificationBuilder = Notifications.create()
                    .title("Updated Successfully")
                    .text("saved to/home/downloads")
                    .graphic(null)
                    .hideAfter(Duration.seconds(5))
                    .position(Pos.BOTTOM_RIGHT)
                    .onAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            System.out.println("clicked on notification");
                        }

                    });
            notificationBuilder.showConfirm();
        }
    }

    public void btnOnSearchAction(ActionEvent event) {
        if (validateInput()) {
            try {
                String patientName = (String) PatientCombo.getValue();
                Bill bill = billingService.searchByName(patientName);
                if (bill != null) {
                    currentBillId = bill.getBillId();
                    PatientCombo.setValue(bill.getPatientName());
                    txtTotalAmount.setText(String.valueOf(bill.getTotalAmount()));
                    PaidCombo.setValue(bill.getPaymentStatus());
                    datePicker.setValue(bill.getDate());
                } else {
                    new Alert(Alert.AlertType.ERROR, "No bill found for the selected patient").showAndWait();
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public void btnOnDeleteAction(ActionEvent event) {
        if (validateInput()) {
            try {
                String patientName = (String) PatientCombo.getValue();
                boolean isDeleted = billingService.delete(patientName);
                if (isDeleted) {
                    clearForm();
                    Notifications notificationBuilder = Notifications.create()
                            .title("Deleted Successfully")
                            .text("Bill deleted successfully")
                            .graphic(null)
                            .hideAfter(Duration.seconds(5))
                            .position(Pos.BOTTOM_RIGHT)
                            .onAction(new EventHandler<ActionEvent>() {
                                @Override
                                public void handle(ActionEvent event) {
                                    System.out.println("clicked on notification");
                                }
                            });
                    notificationBuilder.showConfirm();
                } else {
                    new Alert(Alert.AlertType.ERROR, "Failed to delete the bill").showAndWait();
                }
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public void btnOnBillsAction(ActionEvent event) {
    }

    public void btnOnActionReload(ActionEvent event) {
        clearForm();
        loadPatientNames();
        Notifications notificationBuilder = Notifications.create()
                .title("Reloaded Successfully")
                .text("Patient names reloaded")
                .graphic(null)
                .hideAfter(Duration.seconds(5))
                .position(Pos.BOTTOM_RIGHT)
                .onAction(new EventHandler<ActionEvent>() {
                    @Override
                    public void handle(ActionEvent event) {
                        System.out.println("clicked on notification");
                    }
                });
        notificationBuilder.showConfirm();
    }

    private void loadPatientNames(){
        try {
            List<String> patientNames = patientService.getPatientNames();
            PatientCombo.setItems(FXCollections.observableArrayList(patientNames));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        PaidCombo.getItems().addAll("Paid", "Not Paid");
        loadPatientNames();
    }

    private boolean validateInput() {


        //validate name
        if (PatientCombo.getValue() == null) {
            new Alert(Alert.AlertType.ERROR, "Select a patient ").showAndWait();
            return false;
        }
        return true;
    }
}
